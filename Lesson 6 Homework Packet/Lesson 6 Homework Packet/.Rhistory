# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
loess_line <- loess(normtemp$hr~normtemp$temp)
lines(predict(loess_line), col='red', lwd=2)
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(normtemp$hr~normtemp$temp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Insert your R code here.
summary(linear.heartratetemp.model)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
lines(predict(loess_line), col='red', lwd=2)
}
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Insert your R code here.
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Compute confidence interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Insert your R code here.
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
temp <- normtemp$temp
hr <- normtemp$hr
fit <- linear.heartratetemp.model$fitted.values
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Summary of linear model
summary(linear.heartratetemp.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Compute confidence interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Insert your R code here.
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
resids
temp <- normtemp$temp
hr <- normtemp$hr
fit <- linear.heartratetemp.model$fitted.values
plot(resids,fit)
plot(fit,resids)
plot(temp,resids)
hist(resids)
boxplot(resids)
plot(fit,resids)
# Make normal probability plot of resids and add fit line.
{
qqnorm(sampleStat, ylab="Exponential Sample Means Size 10")
qqline(sampleStat)
}
# Make normal probability plot of resids and add fit line.
{
qqnorm(resids) #, ylab="Exponential Sample Means Size 10")
qqline(resids)
}
plot(fit,resids)
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
# Summary of linear model
summary(linear.heartratetemp.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Get data
require(DS705data)
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature (F)", ylab = "Heart Rate (bpm)")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Summary of linear model
summary(linear.heartratetemp.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Compute confidence interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Plots and Shapiro-Wilk test.
require(ggplot2)
require(grid)
require(gridExtra)
#install.packages("qqplotr")
require(qqplotr)
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
temp <- normtemp$temp
#hr <- normtemp$hr
fit <- linear.heartratetemp.model$fitted.values
resids_df <- data.frame(residuals = resids)
p <- ggplot(data = resids_df, mapping = aes(sample = residuals))
p + stat_qq() + stat_qq_line()
View(resids_df)
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
gg <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
gg
class(resids_df$residuals)
View(resids_df)
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature (F)", ylab = "Heart Rate (bpm)")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Summary of linear model
summary(linear.heartratetemp.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Compute confidence interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Plots and Shapiro-Wilk test.
require(ggplot2)
require(qqplotr)
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
resids_df <- data.frame(residuals = resids)
p <- ggplot(data = resids_df, mapping = aes(sample = residuals))
p + stat_qq() + stat_qq_line()
# installing/loading the latest installr package:
install.packages("installr"); library(installr) # install+load installr
updateR() # updating R.
any( !is.finite( resids_df$residuals ) )
any( !is.na( resids_df$residuals ) )
resids_df <- resids_df[is.finite(rowSums(resids_df)),]
resids_df <- data.frame(residuals =  resids)
resids_df <- resids_df[is.finite(rowSums(resids_df)),]
any( !is.finite( resids_df$residuals ) )
resids_df <- resids_df[is.finite(rowSums(resids_df)),]
resids_df <- data.frame(residuals =  resids)
View(resids_df)
df <- resids_df[is.finite(rowSums(resids_df)), ]
df <- data.frame(resids_df[is.finite(rowSums(resids_df)), ])
View(df)
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature (F)", ylab = "Heart Rate (bpm)")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Plots and Shapiro-Wilk test.
require(ggplot2)
require(qqplotr)
require(grid)
require(gridExtra)
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
temp <- normtemp$temp
#hr <- normtemp$hr
fit <- linear.heartratetemp.model$fitted.values
resids_df <- data.frame(residuals_meallen =  resids)
p <- ggplot(data = resids_df, mapping = aes(sample = residuals_meallen))
p + stat_qq() + stat_qq_line()
View(resids_df)
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
gg <- ggplot(data = resids_df, mapping = aes(sample = residuals_meallen)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
gg
class(resids_df)
class(resids_df$residuals_meallen)
# Plots and Shapiro-Wilk test.
devtools::install_github('cran/ggplot2')
# Plots and Shapiro-Wilk test.
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature (F)", ylab = "Heart Rate (bpm)")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Summary of linear model
summary(linear.heartratetemp.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Compute confidence interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Plot resids~pred, resids~temp, resids hist, resids normal prob, and box plot and Shapiro-Wilk test.
#install.packages('ggplot2')
require(ggplot2)
require(qqplotr)
require(grid)
require(gridExtra)
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
temp <- normtemp$temp
#hr <- normtemp$hr
fit <- linear.heartratetemp.model$fitted.values
resids_df <- data.frame(residuals = resids, pred = fit, temp = temp)
resids_pred <- ggplot(resids_df,aes(x=pred, y=residuals)) + geom_point()
grid.arrange(resids_pred, resids_temp,nrow=2, ncol=3, top="Predictors by Response", bottom = "Figure 2 Boxplots of Predictors by Response")
resids_temp <- ggplot(resids_df,aes(x=temp, y=residuals)) + geom_point()
grid.arrange(resids_pred, resids_temp,nrow=2, ncol=3, top="Predictors by Response", bottom = "Figure 2 Boxplots of Predictors by Response")
grid.arrange(resids_pred, resids_temp,nrow=1, ncol=2, top="Residual Plots")
grid.arrange(resid_normal_qq, resids_boxplot, resids_hist,nrow=1, ncol=3, top="Residual Normal Plots")
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
resid_normal_qq <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Normal Q-Q Plot")
resids_boxplot <- ggplot(aes(y = residuals), data = resids_df) + geom_boxplot() +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
#resids_boxplot
resids_hist <- ggplot(data=resids_df, aes(residuals)) + geom_histogram(breaks=seq(-15, 15, by=1))
grid.arrange(resid_normal_qq, resids_boxplot, resids_hist,nrow=1, ncol=3, top="Residual Normal Plots")
grid.arrange(resids_boxplot, resids_hist,nrow=1, ncol=2)
#resid_normal_qq
grid.arrange(resid_normal_qq,nrow=1, ncol=1)
#shapiro-wilk test for normality
shapiro.test(resids)
install.packages('HH')
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature (F)", ylab = "Heart Rate (bpm)")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Summary of linear model
summary(linear.heartratetemp.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Compute confidence interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Plot resids~pred, resids~temp, resids hist, resids normal prob, and box plot and Shapiro-Wilk test.
#install.packages('ggplot2')
require(ggplot2)
require(qqplotr)
require(grid)
require(gridExtra)
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
temp <- normtemp$temp
#hr <- normtemp$hr
fit <- linear.heartratetemp.model$fitted.values
resids_df <- data.frame(residuals = resids, pred = fit, temp = temp)
# #shapiro-wilk test for normality
shapiro.test(resids)
resids_boxplot <- ggplot(aes(y = residuals), data = resids_df) + geom_boxplot() +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
resids_hist <- ggplot(data=resids_df, aes(residuals)) + geom_histogram(breaks=seq(-15, 15, by=1))
grid.arrange(resids_boxplot, resids_hist,nrow=1, ncol=2)
```{r echo=FALSE, fig.width=8, fig.height=3}
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
resid_normal_qq <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Normal Q-Q Plot")
resid_normal_qq
```{r echo=FALSE}
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
resid_normal_qq <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Normal Q-Q Plot")
resid_normal_qq
```{r echo=FALSE, fig.width=5, fig.height=3}
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
resid_normal_qq <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Normal Q-Q Plot")
resid_normal_qq
```{r echo=FALSE, fig.width=4, fig.height=3}
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
resid_normal_qq <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Normal Q-Q Plot")
resid_normal_qq
```{r echo=FALSE, fig.width=5, fig.height=3}
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
resid_normal_qq <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Normal Q-Q Plot")
resid_normal_qq
```{r echo=FALSE, fig.width=3, fig.height=3}
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
resid_normal_qq <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Normal Q-Q Plot")
resid_normal_qq
```{r echo=FALSE, fig.width=4, fig.height=4}
```{r echo=FALSE, fig.width=4, fig.height=4}
#https://cran.r-project.org/web/packages/qqplotr/vignettes/introduction.html
resid_normal_qq <- ggplot(data = resids_df, mapping = aes(sample = residuals)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("Normal Q-Q Plot")
resid_normal_qq
resids_pred <- ggplot(resids_df,aes(x=pred, y=residuals)) + geom_point()
resids_pred
resids_temp
