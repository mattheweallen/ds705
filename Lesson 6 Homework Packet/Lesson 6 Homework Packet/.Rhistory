# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
loess_line <- loess(normtemp$hr~normtemp$temp)
lines(predict(loess_line), col='red', lwd=2)
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(normtemp$hr~normtemp$temp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Insert your R code here.
summary(linear.heartratetemp.model)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
lines(predict(loess_line), col='red', lwd=2)
}
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Insert your R code here.
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Compute confidence interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Insert your R code here.
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
temp <- normtemp$temp
hr <- normtemp$hr
fit <- linear.heartratetemp.model$fitted.values
# Get data
require(DS705data)
data("normtemp")
# Remove Missing Values
normtemp <- na.omit(normtemp)
loess_line <- loess(hr~temp,normtemp)
{
# Create Scatter Plot
plot(normtemp$hr~normtemp$temp, xlab ="Body Temperature F", ylab = "Heart Rate bpm")
lines(predict(loess_line), col='red', lwd=2)
}
# Obtain estimated slope and y-intercept.
linear.heartratetemp.model<-with(normtemp,lm(hr~temp))
linear.heartratetemp.model
# Summary of linear model
summary(linear.heartratetemp.model)
# 95% confidence interval of rate of change heart rate for 1 degree change in temperature
confint(linear.heartratetemp.model)
# Compute confidence interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df , interval="confidence")
# Compute prediction interval
temp_df <- data.frame( temp = 98.6 )
predict(linear.heartratetemp.model, temp_df, interval="prediction")
# Insert your R code here.
#line 347
resids <- linear.heartratetemp.model$resid # extract residuals from model
resids
temp <- normtemp$temp
hr <- normtemp$hr
fit <- linear.heartratetemp.model$fitted.values
plot(resids,fit)
plot(fit,resids)
plot(temp,resids)
hist(resids)
boxplot(resids)
plot(fit,resids)
# Make normal probability plot of resids and add fit line.
{
qqnorm(sampleStat, ylab="Exponential Sample Means Size 10")
qqline(sampleStat)
}
# Make normal probability plot of resids and add fit line.
{
qqnorm(resids) #, ylab="Exponential Sample Means Size 10")
qqline(resids)
}
plot(fit,resids)
