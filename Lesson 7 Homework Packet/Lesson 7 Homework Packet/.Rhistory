load("~/Google Drive/DS 705 /Class Materials /Weekly Content/week 12/download_week_12/hotdogs.rda")
TukeyHSD(aov(calories~type,data=hotdogs))
tk <- onewayComp(calories~type, data=hotdogs, var.equal=TRUE, alpha=.1)
tk
source('./onewayComp.R') # included in weekly download
setwd("~/Google Drive/DS 705 /Class Materials /Weekly Content/week 07/download")
onewayComp(scoreInc~group, data=d, var.equal=T)$comp[,c(1,2,3,6)]
source('./onewayComp.R') # included in weekly download
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/DS 705 /Class Materials /Weekly Content/week 07/download/onewayComp.R')
source('~/Google Drive/DS 705 /Class Materials /Weekly Content/week 07/download/onewayComp.R')
require(DS705data)
instal.packages("DS705data")
install.packages("DS705data")
require(DS705data)
?onewayComp
install.packages('multcompView')
require(DS705data)
out <- onewayComp(RPM~Type, var.equal = T, adjust = 'one.step')$comp[,c(2,3)]
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
attach(Cars93)
summary(Price) # Price is one of the variables in the Cars93 data frame, after attaching we don't have to refer to the data frame.  Don't forget to detach(Cars93) after you're done.
require(DS705data)
out <- onewayComp(RPM~Type, var.equal = T, adjust = 'one.step')$comp[,c(2,3)]
require(multcompView)
padj_extract <- function(formula,data){out$comp[,'p adj']}
multcompBoxplot(RPM~Type,data=Cars93,horizontal=T,compFn="padj_extract")
out
out <- onewayComp(RPM~Type, var.equal = T, adjust = 'one.step')
require(multcompView)
require(multcompView)
padj_extract <- function(formula,data){out$comp[,'p adj']}
multcompBoxplot(RPM~Type,data=Cars93,horizontal=T,compFn="padj_extract")
install.packages('dunn.test')
332*3*875
require(DS705data)
onewayComp(Sepal.Length~Species,iris,var.equal=FALSE)
data("treadwear")
boxplot(wear~brand,data=treadwear)
with( treadwear, tapply( wear, brand, mean) )
with(treadwear, tapply(X = wear, INDEX = brand, FUN = mean))
with(treadwear, tapply(X = wear, INDEX = brand, FUN = shapiro.test))
with(treadwear, tapply(wear~brand, FUN = shapiro.test))
with(treadwear, tapply(wear,brand,shapiro.test))
x = c(86,94,81,71,84,83,86,72,85,68,90,42,56,62,96,79,86,65,72,89,85,87,65,79,63,94,70,78,79,93,86,59,60,81,94)
g = c(rep('A',35),rep('B',35))
g
x2 = c(87,73,93,80,96,62,61,94,51)
x2 = c(87,73,93,80,96,62,61,94,51,95,77,95,67,73,78,45,64,72,82,28,51,84,88,69,70,87,86,43,89,48,89,73,46,84,89)
test = c(x,x2)
boxplot(test~g)
boxplot(test~g)
median(x)
median(x2)
median(test)
average(test)
mean(test)
sort(test)
?edf
ecdf(test)
plot(ecdf(test))
lines(ecdf(test+1))
require(DS705data)
data("farmpond")
View(farmpond)
rich.out <- glm(RICH~FISH + TOTNITR,data=farmpond,family="binomial")
summary(rich.out)
# Exponentiate the anesthetic coefficient to get the odds ratio
exp(-1.5261)
# Exponentiate the anesthetic coefficient to get the odds ratio
exp(-1.5261)
# Create contingency table from anesthesia data
require(DS705data)
data("anesthesia")
anesthetic_nausea <- with(anesthesia,table(anesthetic,nausea))
addmargins(anesthetic_nausea)
chisq.test(anesthetic_nausea, correct=FALSE)
# Create and summarize logistic model of nausea as a function of anesthetic
logistic.model <- glm(nausea~anesthetic,data=anesthesia,family="binomial")
summary(logistic.model)
(13*10)/(26*23)
# Exponentiate the anesthetic coefficient to get the odds ratio
exp(-1.5261)
# Insert your R code here.
require(mosaic)
oddsRatio(anesthetic_nausea,verbose = TRUE)
# Use mosaic to compute the odds ratio for having nausea for anesthetic A vs B.
oddsRatio(anesthetic_nausea,verbose = TRUE)
# Use mosaic to compute the odds ratio for having nausea for anesthetic A vs B.
anestheticA.odssRation <- oddsRatio(anesthetic_nausea,verbose = TRUE)
# Use mosaic to compute the odds ratio for having nausea for anesthetic A vs B.
anestheticA.oddsRatio <- oddsRatio(anesthetic_nausea,verbose = TRUE)
anestheticA.oddsRatio$
str(anestheticA.oddsRatio)
summary(anestheticA.oddsRatio)
names(anestheticA.oddsRatio)
dim(anestheticA.oddsRatio)
anestheticA.oddsRatio
# Use mosaic to compute the odds ratio for having nausea for anesthetic A vs B.
anestheticA.oddsRatio <- oddsRatio(anesthetic_nausea,verbose = TRUE)
anestheticA.oddsRatio
# Use mosaic to compute the odds ratio for having nausea for anesthetic A vs B.
anestheticA.oddsRatio <- oddsRatio(anesthetic_nausea,verbose = TRUE)
anestheticA.oddsRatio
# Use mosaic to compute the odds ratio for having nausea for anesthetic A vs B.
anestheticA.oddsRatio <- oddsRatio(anesthetic_nausea)
anestheticA.oddsRatio
# Compute the reciprocal of odds ratio from part 1 d
1/exp(-1.5261)
