df <- data.frame(x,groujp)
df <- data.frame(x,group)
anboot(x~group,data=df)
anboot(x~group,data=df,pw.comp=NULL)
tmp <- anboot(x~group,data=df,pw.comp=NULL)
tmp
tmp <- anboot(x~group,data=df,pw.comp=c("A","B","C"))
install.packages('asbio')
require(asbio)
remove.packages("asbio", lib="~/Library/R/3.2/library")
install.packages(file.choose(),repos=NULL,type="source")
library(asbio)
eggs<-c(11,17,16,14,15,12,10,15,19,11,23,20,18,17,27,33,22,26,28)
trt<-as.factor(c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4))
pairw.anova(y = eggs, x = trt, method = "lsd")##LSD method
pairw.anova(y = eggs, x = trt, method = "bonf")##Bonferroni
pairw.anova(y = eggs, x = trt, method = "scheffe")##Sheffe
tukey <- pairw.anova(y = eggs, x = trt, method = "tukey")##Tukey HSD
eggs<-c(11,17,16,14,15,12,10,15,19,11,23,20,18,17,27,33,22,26,28)
trt<-as.factor(c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4))
pairw.anova(y = eggs, x = trt, method = "lsd")##LSD method
pairw.anova(y = eggs, x = trt, method = "bonf")##Bonferroni
pairw.anova(y = eggs, x = trt, method = "scheffe")##Sheffe
tukey <- pairw.anova(y = eggs, x = trt, method = "tukey")##Tukey HSD
eggs<-c(11,17,16,14,15,12,10,15,19,11,23,20,18,17,27,33,22,26,28)
trt<-as.factor(c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4))
pairw.anova(y = eggs, x = trt, method = "lsd")##LSD method
pairw.anova(y = eggs, x = trt, method = "bonf")##Bonferroni
pairw.anova(y = eggs, x = trt, method = "scheffe")##Sheffe
tukey <- pairw.anova(y = eggs, x = trt, method = "tukey")##Tukey HSD
tukey
plot(tukey)
plot(tukey)
tukey
bonf.cont(y = eggs, x = trt, lvl = c(1,3), comps = 2)
pairw.kw
?pairw.kw
pairw.kw(eggs,trt)
kw <- pairw.kw(eggs,trt)
plot(kw)
# You can also use the p.adjust function in the stats: library, but I
# haven't wuite figured that out to my satisfaction. See also p.adjust in stats package
p <- c(.0717, 5e-05, .0124, .04525, .83208, .02122, .88829, .05305, 3e-05, .03277) # p from LSD
p.adjust.methods <- c("holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none")
p.adjust(p = p, method = p.adjust.methods, n = length(p))
p.adjust(p = p, method = "fdr", n = length(p))
?complete.cases
?comb
?combn
?TukeyHSD
require(graphics)
summary(fm1 <- aov(breaks ~ wool + tension, data = warpbreaks))
TukeyHSD(fm1, "tension", ordered = TRUE)
plot(TukeyHSD(fm1, "tension"))
install.packages('userfriendlyscience')
library(userfriendlyscience)
ChickenWeight
data(ChickenWeight)
x
y
x <- c(rnorm(20),rnorm(20)+1,rnorm(20)+2)
g <- factor(rep(letters[1:3],each=20))
posthocTGH(x,g)
posthocTGH(x,g,'tukey')
remove.packages("DS705data", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages('swirl')
?install_course_zip
library(swirl)
rm(list=ls())
?install_course_zip
- http://rmarkdown.rstudio.com for getting started and documentation
install_course_github('DataScienceUWL','Statistical_Methods')
swirl()
swirl()
uninstall_course('Statistical Methods')
install_course_github('DataScienceUWL','Statistical_Methods')
swirl()
install_course_github('DataScienceUWL','Statistical_Methods')
uninstall_course('Statistical Methods')
install_course_github('DataScienceUWL','Statistical_Methods')
swirl
swirl()
detach("package:swirl", unload=TRUE)
require(devtools)
library("DS705data", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("DTK", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("DS705data", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools')
}
install_github('DataScienceUWL/DS705data')
}
install.
install.packages('devtools')
install.packages("devtools")
detach(devtools)
remove.packages("devtools", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools')
}
install_github('DataScienceUWL/DS705data')
}
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools')
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools')
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
data()
libarry(DS705data)
library(DS705data)
uninstall.packages('DS705data')
detach("package:DS705data", unload=TRUE)
remove.packages("DS705data", lib="~/Library/R/3.2/library")
date: "September 2, 2015"
set.seed(123)
P     <- 3
Nj    <- c(15, 25, 20)
Sigma <- matrix(c(16,-2, -2,9), byrow=TRUE, ncol=2)
mu11  <- c(-4,  4)
mu21  <- c( 3,  3)
mu31  <- c( 1, -1)
library(mvtnorm)
Y11 <- round(rmvnorm(Nj[1], mean=mu11, sigma=Sigma))
Y21 <- round(rmvnorm(Nj[2], mean=mu21, sigma=Sigma))
Y31 <- round(rmvnorm(Nj[3], mean=mu31, sigma=Sigma))
dfMan1 <- data.frame(Y =rbind(Y11, Y21, Y31),
IV=factor(rep(1:P, Nj)))
manRes1 <- manova(cbind(Y.1, Y.2) ~ IV, data=dfMan1)
summary(manRes1, test="Wilks")
source('~/Google Drive/Gdrive_snap_May_15/MS Data Science/DS 705 CEOEL Folder/class_material/lessons/week 12/instructor_resources/heightWeight.R')
install.packages('sm')
require(sm)
source('~/Google Drive/Gdrive_snap_May_15/MS Data Science/DS 705 CEOEL Folder/class_material/lessons/week 12/instructor_resources/heightWeight.R')
ggplot(df) + geom_histogram(aes(x=height, fill=species))
require(gridExtra)
?grid.arrange
ggplot(df) + geom_histogram( aes(x=height[species=='A',]))
?unstack
unstack(df)
dfunstack <- unstack(df,form=height~species)
head(dfunstack)
h1 <- ggplot(dfunstack) + geom_histogram( aes(x=A))
ggplot(dfunstack) + geom_histogram( aes(x=A))
ggplot(df) + geom_histogram(aes(x=height, fill=species))
ggplot(dfunstack) + geom_histogram( aes(x=A,color=1) )
ggplot(dfunstack) + geom_histogram( aes(x=A,fill=red) )
ggplot(dfunstack) + geom_histogram( aes(x=A,fill='red') )
ggplot(dfunstack) + geom_histogram( aes(x=A,fill='red',binwidth=5) )
ggplot(dfunstack) + geom_histogram( aes(x=A,fill='red',binwidth=5) , binwidth=5)
ggplot(dfunstack) + geom_histogram( aes(x=A,,color='black',fill='red') , binwidth=5)
ggplot(df) + geom_histogram(aes(x=height, fill=species))
h1 <- ggplot(dfunstack) + geom_histogram( aes(x=A,fill='red') , binwidth=5)
h2 <- ggplot(dfunstack) + geom_histogram( aes(x=A,fill='green') , binwidth=5)
h3 <- ggplot(dfunstack) + geom_histogram( aes(x=A,fill='blue') , binwidth=5)
grid.arrange(h1,h2,h3)
dfunstack <- unstack(df,form=height~species)
h1 <- ggplot(dfunstack) + geom_histogram( aes(x=A,fill='red') , binwidth=5)
h2 <- ggplot(dfunstack) + geom_histogram( aes(x=B,fill='green') , binwidth=5)
h3 <- ggplot(dfunstack) + geom_histogram( aes(x=C,fill='blue') , binwidth=5)
grid.arrange(h1,h2,h3)
h1 <- ggplot(dfunstack) + geom_histogram( aes(x=A,fill='red') , binwidth=5)
+ coord_cartesian(xlim = c(140, 210))
h2 <- ggplot(dfunstack) + geom_histogram( aes(x=B,fill='green') , binwidth=5)
+ coord_cartesian(xlim = c(140, 210))
h3 <- ggplot(dfunstack) + geom_histogram( aes(x=C,fill='blue') , binwidth=5)
+ coord_cartesian(xlim = c(140, 210))
grid.arrange(h1,h2,h3)
h1 <- ggplot(dfunstack) + geom_histogram( aes(x=A,fill='red') , binwidth=5) + xlim(140, 210)
h2 <- ggplot(dfunstack) + geom_histogram( aes(x=B,fill='green') , binwidth=5)+ xlim(140, 210)
h3 <- ggplot(dfunstack) + geom_histogram( aes(x=C,fill='blue') , binwidth=5)+ xlim(140, 210)
grid.arrange(h1,h2,h3)
bw <- 4
h1 <- ggplot(dfunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(140, 210)
h2 <- ggplot(dfunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(140, 210)
h3 <- ggplot(dfunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(140, 210)
grid.arrange(h1,h2,h3)
source('~/Google Drive/Gdrive_snap_May_15/MS Data Science/DS 705 CEOEL Folder/class_material/lessons/week 12/instructor_resources/heightWeight.R')
bw <- 4
h1 <- ggplot(dfunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(150, 205)
h2 <- ggplot(dfunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(150, 205)
h3 <- ggplot(dfunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(150, 205)
bw <- 4
h1 <- ggplot(dfunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(150, 205)
h2 <- ggplot(dfunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(150, 205)
h3 <- ggplot(dfunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(150, 205)
grid.arrange(h1,h2,h3)
dfwunstack <- unstack(df,form=weight~species)
bw <- 4
h1 <- ggplot(dfwunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(150, 205)
h2 <- ggplot(dfwunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(150, 205)
h3 <- ggplot(dfwunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(150, 205)
grid.arrange(h1,h2,h3)
dfwunstack <- unstack(df,form=weight~species)
bw <- 4
h1 <- ggplot(dfwunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(150, 205)
h2 <- ggplot(dfwunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(150, 205)
h3 <- ggplot(dfwunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(150, 205)
w1 <- ggplot(dfwunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(50, 150)
w2 <- ggplot(dfwunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(50, 150)
w3 <- ggplot(dfwunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(50, 150)
grid.arrange(w1,w2,w3)
dfwunstack <- unstack(df,form=weight~species)
bw <- 4
low <- 55
hi <- 90
w1 <- ggplot(dfwunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(low,hi)
w2 <- ggplot(dfwunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(low,hi)
w3 <- ggplot(dfwunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(low,hi)
grid.arrange(w1,w2,w3)
dfwunstack <- unstack(df,form=weight~species)
bw <- 3
low <- 55
hi <- 90
w1 <- ggplot(dfwunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(low,hi)
w2 <- ggplot(dfwunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(low,hi)
w3 <- ggplot(dfwunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(low,hi)
grid.arrange(w1,w2,w3)
dflunstack <- unstack(df,form=ld1~species)
bw <- .5
low <- -3
hi <- 3
w1 <- ggplot(dflunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(low,hi)
w2 <- ggplot(dflunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(low,hi)
w3 <- ggplot(dflunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(low,hi)
dflunstack <- unstack(df,form=ld1~species)
bw <- .5
low <- -3
hi <- 3
w1 <- ggplot(dflunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(low,hi)
w2 <- ggplot(dflunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(low,hi)
w3 <- ggplot(dflunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(low,hi)
dflunstack <- unstack(df,form=ld1~species)
bw <- .5
low <- -3
hi <- 3
w1 <- ggplot(dflunstack) + geom_histogram( aes(x=A),fill='red'  , binwidth=bw) + xlim(low,hi)
w2 <- ggplot(dflunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(low,hi)
w3 <- ggplot(dflunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(low,hi)
grid.arrange(w1,w2,w3)
dflunstack <- unstack(df,form=ld1~species)
bw <- .5
low <- -3
hi <- 3
w1 <- ggplot(dflunstack) + geom_histogram( aes(x=A,y=..density..),fill='red'  , binwidth=bw) + xlim(low,hi)
w2 <- ggplot(dflunstack) + geom_histogram( aes(x=B),fill='green', binwidth=bw) + xlim(low,hi)
w3 <- ggplot(dflunstack) + geom_histogram( aes(x=C),fill='blue' , binwidth=bw) + xlim(low,hi)
grid.arrange(w1,w2,w3)
dflunstack <- unstack(df,form=ld1~species)
bw <- .5
low <- -3
hi <- 3
w1 <- ggplot(dflunstack) + geom_histogram( aes(x=A,y=..density..),fill='red'  , binwidth=bw) + xlim(low,hi)
w2 <- ggplot(dflunstack) + geom_histogram( aes(x=B,y=..density..),fill='green', binwidth=bw) + xlim(low,hi)
w3 <- ggplot(dflunstack) + geom_histogram( aes(x=C,y=..density..),fill='blue' , binwidth=bw) + xlim(low,hi)
grid.arrange(w1,w2,w3)
require(DS705data)
data()
?t.test
require(DS705data)
data(HealthExam)
dm <- HealthExam[HealthExam$Sex=='M',c("Height","Weight")]
dm
plot(Height,Weight,data=dm)
plot(dm$Height,dm$Weight)
cov(dm$Height,dm$Weight)
cov(dm)
cor(dm)
require(MVN)
dmm <- as.matrix(dm)
dmm
hzTest(dmm)
mardiaTest(dmm)
roystonTest(dmm)
sqrt(cov(dm))
1/600
4*13
52/1200
?warning
setwd("~/Google Drive/Gdrive_snap_May_15/MS Data Science/DS 705 /Class Materials/Weekly Content/week 06/download_week_06")
source('anovaResampleFast.R')
source('anovaResample.R')
out10<-anovaResampleFast(shields$Diameter,shields$Machine,B=10000,method=2,var.equal=F)
exit
require(DS705data)
data(shields)
out10<-anovaResampleFast(shields$Diameter,shields$Machine,B=10000,method=2,var.equal=F)
require(WRS2)
?t1waybt
out10<-anovaResampleFast(shields$Diameter,shields$Machine,B=10000,method=2,var.equal=T)
out10<-anovaResampleFast(shields$Diameter,shields$Machine,B=10000,method=2,var.equal=F)
x
g
x <- c(rnorm(20,0,1),rnorm(20,1,2),rnorm(20,2,4))
g <- rep(c('a','b','c'),each=20)
g
out10<-anovaResampleFast(shields$Diameter,shields$Machine,B=10000,method=2,var.equal=T)
out <- anovaResampleFast(x,g,B=10000,method-2,var.equal=F)
out <- anovaResampleFast(x,g,B=10000,method=2,var.equal=F)
x <- c(rnorm(20,0,1),rnorm(20,2,2),rnorm(20,4,4))
out <- anovaResampleFast(x,g,B=10000,method=2,var.equal=F)
x <- c(rnorm(20,0,1),rnorm(20,1.5,2),rnorm(20,3,4))
out <- anovaResampleFast(x,g,B=10000,method=2,var.equal=F)
x2 <- c(rexp(20),2*rexp(20),4*rexp(20))
x2 <- c(rexp(20),2*rexp(20),4*rexp(20))
out <- anovaResampleFast(x2,g,B=10000,method=2,var.equal=F)
x2 <- c(rexp(20),1.5*rexp(20),3*rexp(20))
out <- anovaResampleFast(x2,g,B=10000,method=2,var.equal=F)
out <- anovaResampleFast(x2,g,B=10000,method=1,var.equal=F)
out <- anovaResampleFast(x2,g,B=10000,method=1,var.equal=T)
out <- anovaResampleFast(x2,g,B=10000,method=1,var.equal=T)
1.88 sqrt(2)
1.88*sqrt(2)
sqrt( 25 - 4*2.05^2-.92^2)
1.92*sqrt(2)
sqrt(2)*.08*-1
sqrt( 25 - 4*2.05^2-.92^2) - 2*sqrt(2)
source('~/Desktop/portWineStains.R')
study
#Explore the data
plot(response ~ treat, data=study)
tapply(study$response, study$treat, sd) # Or with(study, tapply(response, treat, sd))
#Exploring age group 6-11 further
hist(as.numeric(group_611))
boxplot(as.numeric(group_611))
#Test data (equal variances ANOVA)
results = aov(response ~ treat, data=study)
summary(results)
#Attempts to replicate Ott's QQ plot and p-value conclusions
anova( stains.lm <- lm(response ~ treat, data=study) )
summary(stains.lm)
tapply(study$response,study$treat,shapiro.test)
plot(response ~ treat, data=study)
plot(response ~ treat, data=study)
tapply(study$response, study$treat, length) # Or with(study, tapply(response, treat, sd))
anovaResampleFast(response~treat,data=study,nboot=10000)
tapply(study$response, study$treat, length) # Or with(study, tapply(response, treat, sd))
anovaResampleFast(study$response~study$treat,nboot=10000)
anovaResampleFast(study$response,study$treat,nboot=10000)
anovaResampleFast(study$response,study$treat,B=10000,method=1,var.equal=TRUE)
anovaResampleFast(study$response,study$treat,B=10000,method=2,var.equal=TRUE)
con <- rbind( c(1,1,0), c(NA,0,0))
con
?any
?is.na
is.na(con)
any(is.na(con))
?.libPaths
x = c(1,2,3,NaN)
x
x[is.na(x)] = 75
x
?prop.test
prop.test(1200,2500,p=.44,correct = FALSE)
prop.test(1200,2500,p=.44,alternative="greater",correct = FALSE)
require(DS705data)
data("HealthExam")
table(HealthExam$Region)
# Create table and display it with margins
outstanding <- c(70,66)
not_outstanding <- c(150,81)
table(outstanding,not_outstanding)
table(matrix(c(outstanding, not_outstanding),ncol=2)
matrix(c(outstanding, not_outstanding),ncol=2)
matrix(c(outstanding, not_outstanding),ncol=2)
as.table(matrix(c(outstanding, not_outstanding),ncol=2),)
rating_table <- as.table(matrix(c(outstanding, not_outstanding),ncol=2))
rating_table
rating_table <- table(matrix(c(outstanding, not_outstanding),ncol=2))
rating_table
rating_table <- as.table(matrix(c(outstanding, not_outstanding),ncol=2))
rating_table
rating_table$col.names <- c("Outstanding","NotOutstanding")
rating_table
rating_table <- as.table(matrix(c(outstanding, not_outstanding),ncol=2))
rating_table$row.names <- c("Outstanding","NotOutstanding")
rating_table
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
data.frame(matrix(c(outstanding, not_outstanding),ncol=2), row.names = institution)
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
rating_df <- data.frame(matrix(c(outstanding, not_outstanding),ncol=2), row.names = institution)
colnames(df) <- c("Outstanding","NotOutstanding")
View(rating_df)
colnames(df)
colnames(rating_df) <- c("Outstanding","NotOutstanding")
View(rating_df)
table(rating_df)
rating_df <- data.frame(matrix(c(institution, outstanding, not_outstanding),ncol=2))
colnames(rating_df) <- c("Institution", "Outstanding","Not Outstanding")
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
rating_df <- data.frame(matrix(c(institution, outstanding, not_outstanding),ncol=2))
colnames(rating_df) <- c("Institution", "Outstanding","Not Outstanding")
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
rating_df <- data.frame(matrix(c(institution, outstanding, not_outstanding),ncol=3))
colnames(rating_df) <- c("Institution", "Outstanding","Not Outstanding")
matrix(c(outstanding, not_outstanding),ncol=2)
rating_matrix <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(rating_matrix) <- c("Outstanding","Not Outstanding")
rownames(rating_matrix) <- institution
rating_matrix
addmargins(ratings)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
addmargins(ratings)
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
addmargins(ratings)
ratings <- addmargins(ratings)
ratings
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
ratings <- addmargins(as.table(ratings))
ratings
# Insert your R code here.
prop.test(66,147)
# Insert your R code here.
prop.test(66,147,correct = FALSE)
# Insert your R code here.
prop.test(66,147,correct = FALSE)$conf.int
# Insert your R code here.
prop.test(c(66,70),c(147,220),correct = FALSE)$conf.int
# Insert your R code here.
prop.test(66-70,147-220,correct = FALSE)$conf.int
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
prop.test(c(66,70),c(147,220),correct = FALSE)$conf.int
60/147
66/147
70/220
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
# what is the estimated risk of a bank not being rated as outstanding?
ratings[Bank]
# what is the estimated risk of a bank not being rated as outstanding?
ratings[Bank,]
# what is the estimated risk of a bank not being rated as outstanding?
ratings["Bank"",]
# what is the estimated risk of a bank not being rated as outstanding?
ratings["Bank",]
# what is the estimated risk of a bank not being rated as outstanding?
rownames(ratings)
ratings["Bank"]
ratings[c("Bank"),]
ratings["Bank",]
# what is the estimated risk of a bank not being rated as outstanding?
rownames(ratings)
ratings["Bank",]
ratings["Bank","Not Outstanding"]
ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
ratings["Bank","Sum"]
ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
prop.test(abs(ratings["Credit Union","Outstanding"]-ratings["Credit Union","Outstanding"]),abs(ratings["Credit Union","Sum"]-ratings["Bank","Sum"]),correct = FALSE)$conf.int
ratings["Credit Union","Outstanding"]
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
prop.test(abs(ratings["Credit Union","Outstanding"]-ratings["Bank","Outstanding"]),abs(ratings["Credit Union","Sum"]-ratings["Bank","Sum"]),correct = FALSE)$conf.int
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
# Construct 95% Confidence Interval for proportion of Credit Unions rated as Outstanding.
prop.test(ratings["Credit Union","Outstanding"],ratings["Credit Union","Sum"],correct = FALSE)$conf.int
# what is the estimated risk of a Credit not being rated as outstanding?
ratings["Credit Union","Not Outstanding"]/ratings["Credit Union","Sum"]
# what is the estimated risk of a bank not being rated as outstanding?
bank_risk_not_outstanding <- ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
ratings <- addmargins(as.table(ratings))
ratings
# Construct 95% Confidence Interval for proportion of Credit Unions rated as Outstanding.
prop.test(ratings["Credit Union","Outstanding"],ratings["Credit Union","Sum"],correct = FALSE)$conf.int
# Insert your R code here.
prop.test(abs(ratings["Credit Union","Outstanding"]-ratings["Bank","Outstanding"]),abs(ratings["Credit Union","Sum"]-ratings["Bank","Sum"]),correct = FALSE)$conf.int
# what is the estimated risk of a bank not being rated as outstanding?
bank_risk_not_outstanding <- ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
bank_risk_not_outstanding
# what is the estimated risk of a Credit not being rated as outstanding?
credit_union_risk_not_outstanding <- ratings["Credit Union","Not Outstanding"]/ratings["Credit Union","Sum"]
credit_union_risk_not_outstanding
