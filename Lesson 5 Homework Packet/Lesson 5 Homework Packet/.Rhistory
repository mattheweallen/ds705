1.88 sqrt(2)
1.88*sqrt(2)
sqrt( 25 - 4*2.05^2-.92^2)
1.92*sqrt(2)
sqrt(2)*.08*-1
sqrt( 25 - 4*2.05^2-.92^2) - 2*sqrt(2)
source('~/Desktop/portWineStains.R')
study
#Explore the data
plot(response ~ treat, data=study)
tapply(study$response, study$treat, sd) # Or with(study, tapply(response, treat, sd))
#Exploring age group 6-11 further
hist(as.numeric(group_611))
boxplot(as.numeric(group_611))
#Test data (equal variances ANOVA)
results = aov(response ~ treat, data=study)
summary(results)
#Attempts to replicate Ott's QQ plot and p-value conclusions
anova( stains.lm <- lm(response ~ treat, data=study) )
summary(stains.lm)
tapply(study$response,study$treat,shapiro.test)
plot(response ~ treat, data=study)
plot(response ~ treat, data=study)
tapply(study$response, study$treat, length) # Or with(study, tapply(response, treat, sd))
anovaResampleFast(response~treat,data=study,nboot=10000)
tapply(study$response, study$treat, length) # Or with(study, tapply(response, treat, sd))
anovaResampleFast(study$response~study$treat,nboot=10000)
anovaResampleFast(study$response,study$treat,nboot=10000)
anovaResampleFast(study$response,study$treat,B=10000,method=1,var.equal=TRUE)
anovaResampleFast(study$response,study$treat,B=10000,method=2,var.equal=TRUE)
con <- rbind( c(1,1,0), c(NA,0,0))
con
?any
?is.na
is.na(con)
any(is.na(con))
?.libPaths
x = c(1,2,3,NaN)
x
x[is.na(x)] = 75
x
?prop.test
prop.test(1200,2500,p=.44,correct = FALSE)
prop.test(1200,2500,p=.44,alternative="greater",correct = FALSE)
require(DS705data)
data("HealthExam")
table(HealthExam$Region)
# Create table and display it with margins
outstanding <- c(70,66)
not_outstanding <- c(150,81)
table(outstanding,not_outstanding)
table(matrix(c(outstanding, not_outstanding),ncol=2)
matrix(c(outstanding, not_outstanding),ncol=2)
matrix(c(outstanding, not_outstanding),ncol=2)
as.table(matrix(c(outstanding, not_outstanding),ncol=2),)
rating_table <- as.table(matrix(c(outstanding, not_outstanding),ncol=2))
rating_table
rating_table <- table(matrix(c(outstanding, not_outstanding),ncol=2))
rating_table
rating_table <- as.table(matrix(c(outstanding, not_outstanding),ncol=2))
rating_table
rating_table$col.names <- c("Outstanding","NotOutstanding")
rating_table
rating_table <- as.table(matrix(c(outstanding, not_outstanding),ncol=2))
rating_table$row.names <- c("Outstanding","NotOutstanding")
rating_table
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
data.frame(matrix(c(outstanding, not_outstanding),ncol=2), row.names = institution)
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
rating_df <- data.frame(matrix(c(outstanding, not_outstanding),ncol=2), row.names = institution)
colnames(df) <- c("Outstanding","NotOutstanding")
View(rating_df)
colnames(df)
colnames(rating_df) <- c("Outstanding","NotOutstanding")
View(rating_df)
table(rating_df)
rating_df <- data.frame(matrix(c(institution, outstanding, not_outstanding),ncol=2))
colnames(rating_df) <- c("Institution", "Outstanding","Not Outstanding")
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
rating_df <- data.frame(matrix(c(institution, outstanding, not_outstanding),ncol=2))
colnames(rating_df) <- c("Institution", "Outstanding","Not Outstanding")
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
rating_df <- data.frame(matrix(c(institution, outstanding, not_outstanding),ncol=3))
colnames(rating_df) <- c("Institution", "Outstanding","Not Outstanding")
matrix(c(outstanding, not_outstanding),ncol=2)
rating_matrix <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(rating_matrix) <- c("Outstanding","Not Outstanding")
rownames(rating_matrix) <- institution
rating_matrix
addmargins(ratings)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
addmargins(ratings)
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
addmargins(ratings)
ratings <- addmargins(ratings)
ratings
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
ratings <- addmargins(as.table(ratings))
ratings
# Insert your R code here.
prop.test(66,147)
# Insert your R code here.
prop.test(66,147,correct = FALSE)
# Insert your R code here.
prop.test(66,147,correct = FALSE)$conf.int
# Insert your R code here.
prop.test(c(66,70),c(147,220),correct = FALSE)$conf.int
# Insert your R code here.
prop.test(66-70,147-220,correct = FALSE)$conf.int
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
prop.test(c(66,70),c(147,220),correct = FALSE)$conf.int
60/147
66/147
70/220
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
# what is the estimated risk of a bank not being rated as outstanding?
ratings[Bank]
# what is the estimated risk of a bank not being rated as outstanding?
ratings[Bank,]
# what is the estimated risk of a bank not being rated as outstanding?
ratings["Bank"",]
# what is the estimated risk of a bank not being rated as outstanding?
ratings["Bank",]
# what is the estimated risk of a bank not being rated as outstanding?
rownames(ratings)
ratings["Bank"]
ratings[c("Bank"),]
ratings["Bank",]
# what is the estimated risk of a bank not being rated as outstanding?
rownames(ratings)
ratings["Bank",]
ratings["Bank","Not Outstanding"]
ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
ratings["Bank","Sum"]
ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
prop.test(abs(ratings["Credit Union","Outstanding"]-ratings["Credit Union","Outstanding"]),abs(ratings["Credit Union","Sum"]-ratings["Bank","Sum"]),correct = FALSE)$conf.int
ratings["Credit Union","Outstanding"]
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
prop.test(abs(ratings["Credit Union","Outstanding"]-ratings["Bank","Outstanding"]),abs(ratings["Credit Union","Sum"]-ratings["Bank","Sum"]),correct = FALSE)$conf.int
# Insert your R code here.
prop.test(abs(66-70),abs(147-220),correct = FALSE)$conf.int
# Construct 95% Confidence Interval for proportion of Credit Unions rated as Outstanding.
prop.test(ratings["Credit Union","Outstanding"],ratings["Credit Union","Sum"],correct = FALSE)$conf.int
# what is the estimated risk of a Credit not being rated as outstanding?
ratings["Credit Union","Not Outstanding"]/ratings["Credit Union","Sum"]
# what is the estimated risk of a bank not being rated as outstanding?
bank_risk_not_outstanding <- ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
ratings <- addmargins(as.table(ratings))
ratings
# Construct 95% Confidence Interval for proportion of Credit Unions rated as Outstanding.
prop.test(ratings["Credit Union","Outstanding"],ratings["Credit Union","Sum"],correct = FALSE)$conf.int
# Insert your R code here.
prop.test(abs(ratings["Credit Union","Outstanding"]-ratings["Bank","Outstanding"]),abs(ratings["Credit Union","Sum"]-ratings["Bank","Sum"]),correct = FALSE)$conf.int
# what is the estimated risk of a bank not being rated as outstanding?
bank_risk_not_outstanding <- ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
bank_risk_not_outstanding
# what is the estimated risk of a Credit not being rated as outstanding?
credit_union_risk_not_outstanding <- ratings["Credit Union","Not Outstanding"]/ratings["Credit Union","Sum"]
credit_union_risk_not_outstanding
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
ratings_with_margins <- addmargins(as.table(ratings))
ratings_with_margins
# Construct 95% Confidence Interval for proportion of Credit Unions rated as Outstanding.
prop.test(ratings_with_margins["Credit Union","Outstanding"],ratings_with_margins["Credit Union","Sum"],correct = FALSE)$conf.int
# Insert your R code here.
prop.test(abs(ratings_with_margins["Credit Union","Outstanding"]-ratings_with_margins["Bank","Outstanding"]),abs(ratings_with_margins["Credit Union","Sum"]-ratings_with_margins["Bank","Sum"]),correct = FALSE)$conf.int
# what is the estimated risk of a bank not being rated as outstanding?
library(mosaic)
# what is the estimated risk of a bank not being rated as outstanding?
install.packages("mosaic")
# what is the estimated risk of a bank not being rated as outstanding?
library(mosaic)
# what is the estimated risk of a bank not being rated as outstanding?
require(mosaic)
oddsRatio(ratings, verbose=TRUE)
bank_risk_not_outstanding <- ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
institution <- c("Bank", "Credit Union")
outstanding <- c(70,66)
not_outstanding <- c(150,81)
ratings <- matrix(c(outstanding, not_outstanding),ncol=2)
colnames(ratings) <- c("Outstanding","Not Outstanding")
rownames(ratings) <- institution
ratings_with_margins <- addmargins(as.table(ratings))
ratings_with_margins
# Construct 95% Confidence Interval for proportion of Credit Unions rated as Outstanding.
prop.test(ratings_with_margins["Credit Union","Outstanding"],ratings_with_margins["Credit Union","Sum"],correct = FALSE)$conf.int
# Insert your R code here.
prop.test(abs(ratings_with_margins["Credit Union","Outstanding"]-ratings_with_margins["Bank","Outstanding"]),abs(ratings_with_margins["Credit Union","Sum"]-ratings_with_margins["Bank","Sum"]),correct = FALSE)$conf.int
# what is the estimated risk of a bank not being rated as outstanding?
bank_risk_not_outstanding <- ratings["Bank","Not Outstanding"]/ratings["Bank","Sum"]
# what is the estimated risk of a bank not being rated as outstanding?
bank_risk_not_outstanding <- ratings_with_margins["Bank","Not Outstanding"]/ratings_with_margins["Bank","Sum"]
bank_risk_not_outstanding
# what is the estimated risk of a Credit not being rated as outstanding?
credit_union_risk_not_outstanding <- ratings_with_margins["Credit Union","Not Outstanding"]/ratings_with_margins["Credit Union","Sum"]
credit_union_risk_not_outstanding
# Relative risk banks not outstanding compared to credit unions
bank_risk_not_outstanding/credit_union_risk_not_outstanding
# Estimated odds of credit union being rated as outstanding
odds_credit_union_outstanding = (1-credit_union_risk_not_outstanding)/credit_union_risk_not_outstanding
# Estimated odds of credit union being rated as outstanding
odds_credit_union_outstanding <- (1-credit_union_risk_not_outstanding)/credit_union_risk_not_outstanding
odds_credit_union_outstanding
require(mosaic)
oddsRatio(ratings,verbose = TRUE)
# Estimated odds of credit union being rated as outstanding
odds_credit_union_outstanding <- (1-credit_union_risk_not_outstanding)/credit_union_risk_not_outstanding
odds_credit_union_outstanding
# Estimated odds of credit union being rated as outstanding
#calculate by manually
odds_credit_union_outstanding <- (1-credit_union_risk_not_outstanding)/credit_union_risk_not_outstanding
odds_credit_union_outstanding
#calculate with mosaic
require(mosaic)
oddsRatio(ratings,verbose = TRUE)
# Insert your R code here.
#manual calculation of bank being rated as outstanding
odds_bank_outstanding <- (1-bank_risk_not_outstanding)/bank_risk_not_outstanding
odds_bank_outstanding
# Compute the estimated odds ratio of being rated as outstanding for credit unions compared to banks.
odds_credit_union_outstanding/odds_bank_outstanding
# Create 2X2 matrix for seat belt data
age_group <- c("Teen", "Senior")
always_wear <- c(17,12)
not_always_wear <- c(2,8)
seat_belt_usage <- matrix(c(always_wear, not_always_wear),ncol=2,byrow = TRUE)
colnames(seat_belt_usage) <- age_group
rownames(seat_belt_usage) <- c("always_wear", "not_always_wear")
seat_belt_usage
# Insert your R code here.
#p.511-512 Fisher Exact Test
#fisher.test
fisher.test(seat_belt_usage,alternative="two.sided")
# Insert your R code here.
#p.511-512 Fisher Exact Test
#fisher.test
fisher.test(seat_belt_usage,alternative="greater")
# Insert your R code here.
require(DS705data)
data("anesthesia")
View(anesthesia)
table(anesthesia)
with(anesthesia,table(anesthetic,nausea)
with(anesthesia,table(anesthetic,nausea))
with(anesthesia,table(anesthetic,nausea))
addmargins(with(anesthesia,table(anesthetic,nausea)))
anesthetic_nausea <- with(anesthesia,table(anesthetic,nausea))
addmargins(anesthetic_nausea)
barplot(anesthetic_nausea,xlab="Region", ylab="Frequency",
col=c("khaki","cyan","coral"),legend=rownames(tbl),beside=T)
barplot(anesthetic_nausea,xlab="Region", ylab="Frequency",
col=c("khaki","cyan","coral"),legend=rownames(anesthetic_nausea),beside=T)
barplot(anesthetic_nausea,xlab="Region", ylab="Frequency",
col=c("khaki","cyan"),legend=rownames(anesthetic_nausea),beside=T)
addmargins(anesthetic_nausea)
barplot(anesthetic_nausea,xlab="Region", ylab="Frequency",
col=c("khaki","cyan"),legend=rownames(anesthetic_nausea),beside=T)
# Insert your R code here.
#p 521
chisq.test(anesthetic_nausea)
# Insert your R code here.
#p 521
chisq.test(anesthetic_nausea, correct=FALSE)
knitr::opts_chunk$set(echo = TRUE)
#import data
orig_loan_df <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv")
View(orig_loan_df)
#import data
orig_loan_df <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
View(orig_loan_df)
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
View(loans)
unique(loans$response)
table(loans$response)
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
loans$response <- replace(loans$response, loans$response == c("Charged Off","Default","Fully Paid"), c("Bad","Bad","Good"))
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
replace(loans$response, loans$response == c("Charged Off","Default","Fully Paid"), c("Bad","Bad","Good"))
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
replace(loans$response, loans$response == "Charged Off", "Bad")
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
replace(loans$response, which(loans$response == "Charged Off"), "Bad")
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
replace(loans$response, which(loans$response == "Charged Off"), "Bad")
View(loans)
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response <- replace(loans$response, which(loans$response == "Charged Off"), "Bad")
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response["Charged Off"] <- "Bad"
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response["Charged Off"] <- "Bad"
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response["Charged Off"]
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response["Charged Off"]
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response["Charged off"]
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response["Charged Off"]
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response["Charged Off",]
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
which(loans$response == "Charged Off")
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
which(loans$response == "Charged Off")
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
loans$response[which(loans$response == "Charged Off")] <- "Bad"
View(loans)
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
levels(loans$response)[levels(loans$response)=="Charged Off"] <- "Bad"
table(loans$response)
levels(loans$response)[levels(loans$response)==c("Charged Off","Default")] <- "Bad"
table(loans$response)
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
#loans$response[which(loans$response == "Charged Off")] <- "Bad"
table(loans$response)
levels(loans$response)[levels(loans$response)==c("Charged Off","Default")] <- "Bad"
table(loans$response)
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
#loans$response[which(loans$response == "Charged Off")] <- "Bad"
table(loans$response)
levels(loans$response)[levels(loans$response)==c("Charged Off")] <- "Bad"
levels(loans$response)[levels(loans$response)==c("Default")] <- "Bad"
table(loans$response)
levels(loans$response)[levels(loans$response)==c("Fully Paid")] <- "Good"
table(loans$response)
loans <- loans[loans$response == c("Good","Bad"),]
table(loans$response)
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
#loans$response[which(loans$response == "Charged Off")] <- "Bad"
table(loans$response)
loans <- loans[ loans(loans$response=="Bad" | loans$response=="Good"), ]
loans <- loans[ which(loans$response=="Bad" | loans$response=="Good"), ]
#loans <- loans[loans$response == c("Good","Bad"),]
table(loans$response)
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
#Good loans are those that have a status of "Fully Paid". Bad loans are those that have a status of "Charged Off" or "Default".
#loans$response <-
#c("Charged Off","Default","Fully Paid")
#c("Bad","Bad","Good")
#loans$response[which(loans$response == "Charged Off")] <- "Bad"
table(loans$response)
levels(loans$response)[levels(loans$response)==c("Charged Off")] <- "Bad"
levels(loans$response)[levels(loans$response)==c("Default")] <- "Bad"
levels(loans$response)[levels(loans$response)==c("Fully Paid")] <- "Good"
#loans <- loans[loans$response == c("Good","Bad"),]
table(loans$response)
loans <- loans[which(loans$response=="Bad" | loans$response=="Good"), ]
#loans <- loans[loans$response == c("Good","Bad"),]
table(loans$response)
#remove unuused levels
loans$response <- factor(loans$response)
#loans <- loans[loans$response == c("Good","Bad"),]
table(loans$response)
#
columns_to_keep <- c("response", "income")
loans <- loans[columns_to_keep]
View(loans)
summary(loans)
table(loans)
summary(loans)
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
#import data
loans <- read.csv2("C:/Users/matt/source/repos/ds705/project/loans50k.csv", header = TRUE, sep = ",")
loans$response <- loans$status
levels(loans$response)[levels(loans$response)==c("Charged Off")] <- "Bad"
levels(loans$response)[levels(loans$response)==c("Default")] <- "Bad"
levels(loans$response)[levels(loans$response)==c("Fully Paid")] <- "Good"
loans <- loans[which(loans$response=="Bad" | loans$response=="Good"), ]
#remove unuused levels
loans$response <- factor(loans$response)
#loans <- loans[loans$response == c("Good","Bad"),]
table(loans$response)
#
columns_to_keep <- c("response", "income", "amount", "rate", "grade", "debtIncRat", "length")
loans <- loans[columns_to_keep]
summary(loans)
#eliminate length, many missing values what is another a proxy? show count of n/a.
table(loans$length)
class(loans$length)
#eliminate length, many missing values what is another a proxy? show count of n/a.
table(loans$length)
#1823 as n/a
count(loans$length["n/a"])
#1823 as n/a
length(loans$length["n/a"])
loans$length["n/a"]
loans$length[NA]
#1823 as n/a
length(which(loans$length == "n/a")
#1823 as n/a
length(which(loans$length == "n/a"))
#1823 as n/a
length(which(loans$length == "n/a"))
table(income)
table(loans$income)
summary(loans$income)
