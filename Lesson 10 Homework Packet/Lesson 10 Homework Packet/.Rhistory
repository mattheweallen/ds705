# x is an input of 18 integers 1..10 that assign city 1..18 to districts 1..10
# distAssign is a dataframe with the number of Democrats, Republicans, Total, and Winner
# in each of the 10 districts
sumdem = numeric(10);
sumrep = numeric(10);
sumtot = numeric(10);
for (i in 1:10){
sumdem[i] = sum( cities[x==i,1] );
sumrep[i] = sum( cities[x==i,2] );
sumtot[i] = sumdem[i] + sumrep[i];
}
distAssign <- data.frame( Dem = sumdem, Rep = sumrep, Tot = sumtot, Win = sumrep>sumdem );
}
demrepFit <- function(x){
# x is an input of 18 integers 1..10 that assign city 1..18 to districts 1..10
# demrepfit is the number of districts where Republicans have a majority
# subtract a penalty proportional to amount by which constraints are violated
#
df <- distAssign(x);
numRepDist = sum(df$Win);
sumtot = df$Tot;
# total number of voters is between 150 mil and 350 mil in each district
# to enforce this constraint we subtract a penalty term equal to the total amount this
# constraint is violated
demrepFit = numRepDist - ( sum( 150-sumtot[sumtot<150] )  + sum( sumtot[sumtot>350]-350 ) );
# if the algorithm you use minimizes the fitness instead of maximizing, then
# uncomment the next line, if your routine maximizes then the next line should be
# commented out
demrepFit = -demrepFit;
}
# Notice the constraints aren't explicitly enforced, but instead a penalty term is included in the
# fitness function to encourage the genetic algorithm to seek potential solutions that satisfy
# the constraints.
library('gramEvol')
install.packages('gramEvol')
library('gramEvol')
GA <- GeneticAlg.int(18,1,10,allowrepeat = TRUE,popSize=50,iterations=200,evalFunc=demrepFit) # find minimum
df <- distAssign(GA$best$genome);
df
demrepFit <- function(x){
# x is an input of 18 integers 1..10 that assign city 1..18 to districts 1..10
# demrepfit is the number of districts where Republicans have a majority
# subtract a penalty proportional to amount by which constraints are violated
#
df <- distAssign(x);
numRepDist = sum(df$Win);
sumtot = df$Tot;
# total number of voters is between 150 mil and 350 mil in each district
# to enforce this constraint we subtract a penalty term equal to the total amount this
# constraint is violated
demrepFit = numRepDist - ( sum( 150-sumtot[sumtot<150] )  + sum( sumtot[sumtot>350]-350 ) );
# if the algorithm you use minimizes the fitness instead of maximizing, then
# uncomment the next line, if your routine maximizes then the next line should be
# commented out
#demrepFit = -demrepFit;
}
# you can delete the lines below, they are just there to show you how the functions work
#x = c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8); # a sample assignment
#(demrepFit(x)) # extra parentheses force R to print the result
# calling demrepFit(x) for sample x, yields -37
library(gramEvol)
z = 10
#monitorFunc <- function(result) {
#    cat("Best of gen: ", min(result$best$cost), "\n");
j = 1
for (j in z){
y<- GeneticAlg.int(genomeLen = 18, codonMin = 1, codonMax = 10,
allowrepeat = TRUE,mutationChance = 0.1,iterations=1000,
evalFunc = demrepFit); # demrepFit gives number of republican districts or negative number if constraints violated
if (j == 1)
{bestFit <- y$best$cost
bestGenome <- y$best$genome}
else
if (bestFit < y$best$cost)
{bestFit <- y$best$cost;
bestGenome <- y$best$genome;}
}
bestFit
bestGenome
demrepFit <- function(x){
# x is an input of 18 integers 1..10 that assign city 1..18 to districts 1..10
# demrepfit is the number of districts where Republicans have a majority
# subtract a penalty proportional to amount by which constraints are violated
#
df <- distAssign(x);
numRepDist = sum(df$Win);
sumtot = df$Tot;
# total number of voters is between 150 mil and 350 mil in each district
# to enforce this constraint we subtract a penalty term equal to the total amount this
# constraint is violated
demrepFit = numRepDist - ( sum( 150-sumtot[sumtot<150] )  + sum( sumtot[sumtot>350]-350 ) );
# if the algorithm you use minimizes the fitness instead of maximizing, then
# uncomment the next line, if your routine maximizes then the next line should be
# commented out
#demrepFit = -demrepFit;
}
# you can delete the lines below, they are just there to show you how the functions work
#x = c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8); # a sample assignment
#(demrepFit(x)) # extra parentheses force R to print the result
# calling demrepFit(x) for sample x, yields -37
library(gramEvol)
z = 10
#monitorFunc <- function(result) {
#    cat("Best of gen: ", min(result$best$cost), "\n");
j = 1
for (j in 1:z){
y<- GeneticAlg.int(genomeLen = 18, codonMin = 1, codonMax = 10,
allowrepeat = TRUE,mutationChance = 0.1,iterations=1000,
evalFunc = demrepFit); # demrepFit gives number of republican districts or negative number if constraints violated
if (j == 1)
{bestFit <- y$best$cost
bestGenome <- y$best$genome}
else
if (bestFit < y$best$cost)
{bestFit <- y$best$cost;
bestGenome <- y$best$genome;}
}
bestFit
bestGenome
?ga
library('GA')
?ga
?GeneticAlg.int
demrepFit <- function(x){
# x is an input of 18 integers 1..10 that assign city 1..18 to districts 1..10
# demrepfit is the number of districts where Republicans have a majority
# subtract a penalty proportional to amount by which constraints are violated
#
df <- distAssign(x);
numRepDist = sum(df$Win);
sumtot = df$Tot;
# total number of voters is between 150 mil and 350 mil in each district
# to enforce this constraint we subtract a penalty term equal to the total amount this
# constraint is violated
demrepFit = numRepDist - ( sum( 150-sumtot[sumtot<150] )  + sum( sumtot[sumtot>350]-350 ) );
# if the algorithm you use minimizes the fitness instead of maximizing, then
# uncomment the next line, if your routine maximizes then the next line should be
# commented out
demrepFit = -demrepFit;
}
# you can delete the lines below, they are just there to show you how the functions work
#x = c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8); # a sample assignment
#(demrepFit(x)) # extra parentheses force R to print the result
# calling demrepFit(x) for sample x, yields -37
library(gramEvol)
z = 10
#monitorFunc <- function(result) {
#    cat("Best of gen: ", min(result$best$cost), "\n");
j = 1
for (j in 1:z){
y<- GeneticAlg.int(genomeLen = 18, codonMin = 1, codonMax = 10,
allowrepeat = TRUE,iterations=100,
evalFunc = demrepFit); # demrepFit gives number of republican districts or negative number if constraints violated
if (j == 1)
{bestFit <- y$best$cost
bestGenome <- y$best$genome}
else
if (bestFit < y$best$cost)
{bestFit <- y$best$cost;
bestGenome <- y$best$genome;}
}
bestFit
bestGenome
Rastrigin <- function(x) {
-(sum(x^2 - 10 * cos(2 * pi  * x)) + 10 * length(x))
}
dimension = 10;
lower = rep(-5.12,dimension);
upper = rep(5.12,dimension);
set.seed(123) # for reproducible results
result = ga(type="real-valued",fitness=Rastrigin,min=lower,max=upper,maxiter=500);
round(result@solution,5)
result@fitnessValue
result = ga(type="real-valued",fitness=Rastrigin,
min=lower,max=upper,maxiter=1000,optim=TRUE)
?ga
?GA
demrepFit <- function(x){
# x is an input of 18 integers 1..10 that assign city 1..18 to districts 1..10
# demrepfit is the number of districts where Republicans have a majority
# subtract a penalty proportional to amount by which constraints are violated
#
df <- distAssign(x);
numRepDist = sum(df$Win);
sumtot = df$Tot;
# total number of voters is between 150 mil and 350 mil in each district
# to enforce this constraint we subtract a penalty term equal to the total amount this
# constraint is violated
demrepFit = numRepDist - ( sum( 150-sumtot[sumtot<150] )  + sum( sumtot[sumtot>350]-350 ) );
# if the algorithm you use minimizes the fitness instead of maximizing, then
# uncomment the next line, if your routine maximizes then the next line should be
# commented out
demrepFit = -demrepFit;
}
# you can delete the lines below, they are just there to show you how the functions work
#x = c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8); # a sample assignment
#(demrepFit(x)) # extra parentheses force R to print the result
# calling demrepFit(x) for sample x, yields -37
library(gramEvol)
z = 10
#monitorFunc <- function(result) {
#    cat("Best of gen: ", min(result$best$cost), "\n");
j = 1
for (j in 1:z){
y<- GeneticAlg.int(genomeLen = 18, codonMin = 1, codonMax = 10,
allowrepeat = TRUE,mutationChance = 0.1,iterations=1000,
evalFunc = demrepFit); # demrepFit gives number of republican districts or negative number if constraints violated
if (j == 1)
{bestFit <- y$best$cost
bestGenome <- y$best$genome}
else
if (bestFit < y$best$cost)
{bestFit <- y$best$cost;
bestGenome <- y$best$genome;}
}
bestFit
bestGenome
demrepFit <- function(x){
# x is an input of 18 integers 1..10 that assign city 1..18 to districts 1..10
# demrepfit is the number of districts where Republicans have a majority
# subtract a penalty proportional to amount by which constraints are violated
#
df <- distAssign(x);
numRepDist = sum(df$Win);
sumtot = df$Tot;
# total number of voters is between 150 mil and 350 mil in each district
# to enforce this constraint we subtract a penalty term equal to the total amount this
# constraint is violated
demrepFit = numRepDist - ( sum( 150-sumtot[sumtot<150] )  + sum( sumtot[sumtot>350]-350 ) );
# if the algorithm you use minimizes the fitness instead of maximizing, then
# uncomment the next line, if your routine maximizes then the next line should be
# commented out
demrepFit = -demrepFit;
}
# you can delete the lines below, they are just there to show you how the functions work
#x = c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8); # a sample assignment
#(demrepFit(x)) # extra parentheses force R to print the result
# calling demrepFit(x) for sample x, yields -37
library(gramEvol)
z = 10
#monitorFunc <- function(result) {
#    cat("Best of gen: ", min(result$best$cost), "\n");
j = 1
for (j in 1:z){
y<- GeneticAlg.int(genomeLen = 18, codonMin = 1, codonMax = 10,
allowrepeat = TRUE,iterations=100,
evalFunc = demrepFit); # demrepFit gives number of republican districts or negative number if constraints violated
if (j == 1)
{bestFit <- y$best$cost
bestGenome <- y$best$genome}
else
if (bestFit < y$best$cost)
{bestFit <- y$best$cost;
bestGenome <- y$best$genome;}
}
bestFit
bestGenome
demrepFit <- function(x){
# x is an input of 18 integers 1..10 that assign city 1..18 to districts 1..10
# demrepfit is the number of districts where Republicans have a majority
# subtract a penalty proportional to amount by which constraints are violated
#
df <- distAssign(x);
numRepDist = sum(df$Win);
sumtot = df$Tot;
# total number of voters is between 150 mil and 350 mil in each district
# to enforce this constraint we subtract a penalty term equal to the total amount this
# constraint is violated
demrepFit = numRepDist - ( sum( 150-sumtot[sumtot<150] )  + sum( sumtot[sumtot>350]-350 ) );
# if the algorithm you use minimizes the fitness instead of maximizing, then
# uncomment the next line, if your routine maximizes then the next line should be
# commented out
demrepFit = -demrepFit;
}
# you can delete the lines below, they are just there to show you how the functions work
#x = c(1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8); # a sample assignment
#(demrepFit(x)) # extra parentheses force R to print the result
# calling demrepFit(x) for sample x, yields -37
library(gramEvol)
z = 10
#monitorFunc <- function(result) {
#    cat("Best of gen: ", min(result$best$cost), "\n");
j = 1
for (j in 1:z){
y<- GeneticAlg.int(genomeLen = 18, codonMin = 1, codonMax = 10,
allowrepeat = TRUE,iterations=200,
evalFunc = demrepFit); # demrepFit gives number of republican districts or negative number if constraints violated
if (j == 1)
{bestFit <- y$best$cost
bestGenome <- y$best$genome}
else
if (bestFit < y$best$cost)
{bestFit <- y$best$cost;
bestGenome <- y$best$genome;}
}
bestFit
bestGenome
# Do not change this chunk
set.seed(124)
T0 = 900;
T1 = 100;
x = c( rnorm(T0), rnorm(T1, mean = 3))
P = pnorm(x, lower.tail = FALSE )
P
sum(P < .05)
# FALSE means reject null = discovery
test <- P > 0.05
test0 <- test[1:T0]
test1 <- test[(T0+1):(T0+T1)]
summary(test0)
summary(test1)
# the type I error rate is
sum(test0==FALSE)/T0
# the type II error rate is
sum(test1==TRUE)/T1
# the false discovery rate is
sum(test0==FALSE) / (sum(test0==FALSE) + sum(test1==FALSE))
# the type I error rate is
sum(test0==FALSE)/T0
# the type I error rate is
sum(test0==FALSE)/T0
test0
test0 <- test[1:T0]
test1 <- test[(T0+1):(T0+T1)]
summary(test0)
summary(test1)
T0 = 900;
T1 = 100;
x = c( rnorm(T0), rnorm(T1, mean = 3))
P = pnorm(x, lower.tail = FALSE )
sum(P < .05)
# FALSE means reject null = discovery
test <- P > 0.05
test0 <- test[1:T0]
test1 <- test[(T0+1):(T0+T1)]
summary(test0)
summary(test1)
# the type I error rate is
sum(test0==FALSE)/T0
# the type II error rate is
sum(test1==TRUE)/T1
# the false discovery rate is
sum(test0==FALSE) / (sum(test0==FALSE) + sum(test1==FALSE))
# the type II error rate is
sum(test1==TRUE)/T1
# the type I error rate is
sum(test0==FALSE)/T0
# the type II error rate is
sum(test1==TRUE)/T1
# the false discovery rate is
sum(test0==FALSE) / (sum(test0==FALSE) + sum(test1==FALSE))
# Do not change this chunk of code
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
summary(Cars93)
summary(Cars93$Type)
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
boxplot(Cars93$RPM,Cars93$Type)
boxplot(Cars93$RPM~Cars93$Type)
# Do not change this chunk of code
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
boxplot(Cars93$RPM~Cars93$Type)
pairwise.t.test( pain, treat, p.adjust.method='none',
pool.sd = TRUE)$p.value < 0.05
pairwise.t.test( Cars93$RPM, Cars93$type, p.adjust.method='none',
pool.sd = TRUE)$p.value < 0.05
# Do not change this chunk of code
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
boxplot(Cars93$RPM~Cars93$Type)
pairwise.t.test( Cars93$RPM, Cars93$type, p.adjust.method='none',
pool.sd = TRUE)$p.value < 0.05
pairwise.t.test( Cars93$RPM, Cars93$Type, p.adjust.method='none',
pool.sd = TRUE)$p.value < 0.05
pairwise.t.test( pain, treat, p.adjust.method='bonf',
pool.sd = TRUE)$p.value < 0.05
pairwise.t.test( Cars93$RPM, Cars93$Type, p.adjust.method='bonf',
pool.sd = TRUE)$p.value < 0.05
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp[,c(2,3,6,7)]
require(DS705data)
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp[,c(2,3,6,7)]
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp[,c(2)]
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp[,c(2,3,6,7)]
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp[,c(2,3,5,6)]
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp[,c(2,3,5,7)]
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp[,1]
View(Cars93)
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='one.step')$comp[,1]
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='one.step')$comp
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='bonferroni')$comp
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='one.step', nboot=1000)$comp
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='one.step', nboot=0)$comp
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='one.step', nboot=1000)$comp
boxplot(Price~Type,horizontal=TRUE,data=Cars93)
onewayComp(Price~Type,data=Cars93,var.equal=FALSE,
adjust='one.step')$comp
onewayComp(Price~Type,data=Cars93,var.equal=FALSE,
adjust='one.step')$pair[[3]]<.1
games.howell <- onewayComp(Price~Type,data=Cars93,var.equal=FALSE,
adjust='one.step')
games.howell$pair[[3]]<.1
games.howell
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='one.step', nboot=1000)$comp[,1]
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='one.step', nboot=1000)$comp
games.howell$comp
games.howell$comp[,1]
games.howell$pair[[3]]<.1
games.howell$comp[,1]
games.howell$pair[[3]]<.1
games.howell$comp[,1]
onewayComp(RPM~Type,data=Cars93,var.equal=TRUE,
adjust='one.step', nboot=10000)$comp
games.howell <- onewayComp(Price~Type,data=Cars93,var.equal=FALSE, nboot=10000,
adjust='one.step')
games.howell$pair[[3]]<.1
games.howell$comp[,1]
games.howell <- onewayComp(Price~Type,data=Cars93,var.equal=TRUE, nboot=10000,
adjust='one.step')
games.howell <- onewayComp(Price~Type,data=Cars93,var.equal=TRUE, nboot=10000,
adjust='one.step')
games.howell$pair[[3]]<.1
games.howell <- onewayComp(Price~Type,data=Cars93,var.equal=TRUE, nboot=10000,
adjust='one.step')
games.howell$pair[[3]]<.1
games.howell$comp[,1]
View(Cars93)
Cars93$Type
factors(Cars93$Type)
summarise(Cars93$Type)
summarize(Cars93$Type)
summary(Cars93$Type)
boot.object <- boot(Cars93, bootMedDiff, R = 5000,
strata = Cars93$Type)
contacts <- read.csv('./ex8-27.TXT')
# Do not change this chunk of code
if (!require(MASS)){
install.packages('MASS')
library(MASS)
}
data(Cars93)
Cars93 <- Cars93[Cars93$Type != 'Van',]
Cars93$Type <- factor(Cars93$Type) # recasting Type forces the factor levels to reset
# shorten level labels to make them fit on boxplots
# Cm = Compact
# Lg = Large
# Md = Midsize
# Sm = Small
# Sp = Sporty
Cars93$Type <- factor(Cars93$Type,labels=c('Cm','Lg','Md','Sm','Sp'))
#'Cm','Lg','Md','Sm','Sp'
Cars93[Cars93$Type == 'Cm',]$RPM
#'Cm','Lg','Md','Sm','Sp'
shapiro.test(Cars93[Cars93$Type == 'Cm',]$RPM)
shapiro.test(Cars93[Cars93$Type == 'Lg',]$RPM)
shapiro.test(Cars93[Cars93$Type == 'Md',]$RPM)
shapiro.test(Cars93[Cars93$Type == 'Sm',]$RPM)
shapiro.test(Cars93[Cars93$Type == 'Sp',]$RPM)
