} else if (af[j] == "Project") {
if (adt[k] == "Mfg.Date") {
# consider last 12 months data for analysis from today (current date)
#12/27/2017 consider records for 100% expiration i.e mfg.date > Sys.Date()-days(365*3)
#df_p<-''
#df_p <- df[(df$mfg.date <= (Sys.Date()-days(365*3))),]
print(paste0("df_p rows count ",nrow(df_p))) #4588
x <- table(df_p$project, df_p$mfg_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,mfg_month,project) %>%
rename("Var1" = project,"Var2" = mfg_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, mfg_month, unit.serial.number,expired, active) %>%
rename("Var2" = mfg_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
} else if (adt[k] == "Service.Date") {
# consider last 12 months data for analysis from today (current date)
#12/27/2017 consider records for 100% expiration i.e mfg.date > Sys.Date()-days(365*3)
#df_p<-''
#df_p <- df[(df$service.begin.date <= (Sys.Date()-days(365*3))),]
print(paste0("df_p rows count ",nrow(df_p))) #4588
x <- table(df_p$project, df_p$service_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,service_month,project) %>%
rename("Var1" = project,"Var2" = service_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, service_month, unit.serial.number,expired, active) %>%
rename("Var2" = service_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
}
} else if (af[j] == "Dealer") {
if (adt[k] == "Mfg.Date") {
x <- table(df_p$dealer.name, df_p$mfg_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,mfg_month,dealer.name) %>%
rename("Var1" = dealer.name,"Var2" = mfg_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, mfg_month, unit.serial.number,expired, active) %>%
rename("Var2" = mfg_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
} else if (adt[k] == "Service.Date") {
x <- table(df_p$dealer.name, df_p$service_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,service_month,dealer.name) %>%
rename("Var1" = dealer.name,"Var2" = service_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, service_month, unit.serial.number,expired, active) %>%
rename("Var2" = service_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
}
} #if af
####Hierarchical clustering Regular data prep####
# x is data frame with cof.level.3/Dealer with count by mfg month
x <- data.frame(x)
#select observations with Freq > 3 and cof.level.3/Dealer not blank
#x <- x[which(!(x$Var1 == '')),]
x <- x[which((x$Freq > 3) & !(x$Var1 == '')),]
x$Var1 <- as.character(x$Var1)
x$Var2 <- as.character(x$Var2)
uq_parts <- unique(x$Var1)
#containers to hold result
datalist = list()
df_result=''
#loop throuth each cof.level.3/Dealer and run hc for each one and append the results
for (i in 1:length(uq_parts)){
pc <-''
df_part<-''
df_part <- df_j[df_j$Var1 == uq_parts[i],]
#browser()
#Production count by Year/Month
# it is possible not to get any records for uq_parts[i] in production data set
# i.e. df_j add if condition in order to avoid error
if (nrow(df_part) > 0) {
pc <- table(df_part$Var2)
pc <- data.frame(pc)
head(pc)
pc <- pc %>%
rename("Prod.Count" = Freq,
"Var2"= Var1)
pc$Var2 <- as.character(pc$Var2)
# expired, active by year/month
df_exp <- df_part %>%
group_by(Var2) %>%
summarize(expired.cnt = sum(expired, na.rm=TRUE),
active.cnt = sum(active, na.rm=TRUE))
df_exp <- data.frame(df_exp)
df_exp$exp.percent <- (df_exp$expired.cnt/(df_exp$expired.cnt+df_exp$active.cnt)*100)
}
temp=''
final1=''
temp <- data.frame(x[x$Var1 == uq_parts[i],])
if (nrow(df_part) > 0) {
final1 <- temp %>%
left_join(pc, by = "Var2")
nrow(pc)
#Replace NA with zero for Prod.Count columns
final1$Prod.Count[is.na(final1$Prod.Count)]<-0
final1 <- final1 %>%
left_join(df_exp, by = "Var2")
}
#print(class(final1$Freq))
#print(class(final1$Prod.Count))
#sapply(final1, class)
#browser()
final1 <- final1 %>%
mutate(Rate = final1$Freq/final1$Prod.Count)
#order data frame by column by which you would do anomaly detection in order to get
#clustering group properly, this way higher values will belong to grp. 2 (Anomalous grp)
final1 <- final1[order(final1$Rate),]
#Hierarchical clustring ####
anom.d <- dist(final1[, "Rate"],method = "euclidean")
n <- as.integer(attr(anom.d, "Size"))
#must have n >= 2 objects to cluster otherwise get error:
#https://github.com/SurajGupta/r-source/blob/master/src/library/stats/R/hclust.R
if (n > 2) {
anom.hc <- hclust(d=anom.d, method="complete")
grp1 <- cutree(anom.hc, k=2) # cut tree into 2 clusters
m1<-as.matrix(grp1)
final1 <- data.frame(final1, m1)
nk <- ''
anomaly.scores <- ''
#nk <- nrow(final1)-1
if ( nrow(final1) > 4){
nk <- nrow(final1)-2
} else {
nk <- nrow(final1)-1
}
####LOF Scores: assign nk value for number of neighbors####
anomaly.scores <- lofactor(final1[, "Rate"], k=nk)
final1$Anomaly.score <- anomaly.scores
df_result <- final1 %>%
rename("Part.number" = Var1,
"Year.month" = Var2,
"cluster" = m1) %>%
mutate(Anomaly = ifelse(final1$m1==1,"N","Y"),
Date.type = adt[k],
Anomaly.for = af[j],
Anomaly.type = "Regular",
Freq.Detrend = 0)
datalist[[i]] <- df_result
} # end if (n > 2)
} # For uq_parts
#bind rows for each cof.level.3/Dealer
result <- dplyr::bind_rows(result,datalist)
print(nrow(result))
} # end k
#print(Sys.time()
} # end j
View(x)
library(lubridate)
for (j in 1:length(af)) {
for (k in 1:length(adt)) {
x <- ''
if (af[j] == "cof.level.3") {
if (adt[k] == "Mfg.Date") {
# consider last 12 months data for analysis from today (current date)
#12/27/2017 consider records for 100% expiration i.e mfg.date > Sys.Date()-days(365*3)
#df_p<-''
#df_p <- df[(df$mfg.date <= (Sys.Date()-days(365*3))),]
print(paste0("df_p rows count ",nrow(df_p))) #4588
x <- table(df_p$cof.level.3, df_p$mfg_month)
head(x)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
dplyr::select(product.line,mfg_month,cof.level.3) %>%
rename("Var1" = cof.level.3,"Var2" = mfg_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
dplyr::select(product.line, mfg_month, unit.serial.number,expired, active) %>%
rename("Var2" = mfg_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
} else if (adt[k] == "Service.Date") {
#df_p<-''
#df_p <- df[(df$service.begin.date <= (Sys.Date()-days(365*3))),]
x <- table(df_p$cof.level.3, df_p$service_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,service_month,cof.level.3) %>%
rename("Var1" = cof.level.3,"Var2" = service_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, service_month, unit.serial.number,expired, active) %>%
rename("Var2" = service_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
}
} else if (af[j] == "Project") {
if (adt[k] == "Mfg.Date") {
# consider last 12 months data for analysis from today (current date)
#12/27/2017 consider records for 100% expiration i.e mfg.date > Sys.Date()-days(365*3)
#df_p<-''
#df_p <- df[(df$mfg.date <= (Sys.Date()-days(365*3))),]
print(paste0("df_p rows count ",nrow(df_p))) #4588
x <- table(df_p$project, df_p$mfg_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,mfg_month,project) %>%
rename("Var1" = project,"Var2" = mfg_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, mfg_month, unit.serial.number,expired, active) %>%
rename("Var2" = mfg_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
} else if (adt[k] == "Service.Date") {
# consider last 12 months data for analysis from today (current date)
#12/27/2017 consider records for 100% expiration i.e mfg.date > Sys.Date()-days(365*3)
#df_p<-''
#df_p <- df[(df$service.begin.date <= (Sys.Date()-days(365*3))),]
print(paste0("df_p rows count ",nrow(df_p))) #4588
x <- table(df_p$project, df_p$service_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,service_month,project) %>%
rename("Var1" = project,"Var2" = service_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, service_month, unit.serial.number,expired, active) %>%
rename("Var2" = service_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
}
} else if (af[j] == "Dealer") {
if (adt[k] == "Mfg.Date") {
x <- table(df_p$dealer.name, df_p$mfg_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,mfg_month,dealer.name) %>%
rename("Var1" = dealer.name,"Var2" = mfg_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, mfg_month, unit.serial.number,expired, active) %>%
rename("Var2" = mfg_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
} else if (adt[k] == "Service.Date") {
x <- table(df_p$dealer.name, df_p$service_month)
#get product.line,mfg_month,cof.level.3 from warranty
usn <- df_p %>%
select(product.line,service_month,dealer.name) %>%
rename("Var1" = dealer.name,"Var2" = service_month)
# avoid duplicate model no for same Year/Month and part #
usn <- usn[!duplicated(usn[,c("product.line","Var2","Var1")]),]
#join warranty and population to get unique serial number
df_j <- df_pop %>%
select(product.line, service_month, unit.serial.number,expired, active) %>%
rename("Var2" = service_month) %>%
inner_join(usn, by = c("product.line","Var2"))
# avoid duplicate unit_srl_nbr for same Year/Month and product.line
df_j <- df_j[!duplicated(df_j[,c("product.line","Var2","unit.serial.number","Var1")]),]
#print(paste0("df_j rows count ", nrow(df_j)))
}
} #if af
####Hierarchical clustering Regular data prep####
# x is data frame with cof.level.3/Dealer with count by mfg month
x <- data.frame(x)
#select observations with Freq > 3 and cof.level.3/Dealer not blank
#x <- x[which(!(x$Var1 == '')),]
x <- x[which((x$Freq > 3) & !(x$Var1 == '')),]
x$Var1 <- as.character(x$Var1)
x$Var2 <- as.character(x$Var2)
uq_parts <- unique(x$Var1)
#containers to hold result
datalist = list()
df_result=''
#loop throuth each cof.level.3/Dealer and run hc for each one and append the results
for (i in 1:length(uq_parts)){
pc <-''
df_part<-''
df_part <- df_j[df_j$Var1 == uq_parts[i],]
#browser()
#Production count by Year/Month
# it is possible not to get any records for uq_parts[i] in production data set
# i.e. df_j add if condition in order to avoid error
if (nrow(df_part) > 0) {
pc <- table(df_part$Var2)
pc <- data.frame(pc)
head(pc)
pc <- pc %>%
rename("Prod.Count" = Freq,
"Var2"= Var1)
pc$Var2 <- as.character(pc$Var2)
# expired, active by year/month
df_exp <- df_part %>%
group_by(Var2) %>%
summarize(expired.cnt = sum(expired, na.rm=TRUE),
active.cnt = sum(active, na.rm=TRUE))
df_exp <- data.frame(df_exp)
df_exp$exp.percent <- (df_exp$expired.cnt/(df_exp$expired.cnt+df_exp$active.cnt)*100)
}
temp=''
final1=''
temp <- data.frame(x[x$Var1 == uq_parts[i],])
if (nrow(df_part) > 0) {
final1 <- temp %>%
left_join(pc, by = "Var2")
nrow(pc)
#Replace NA with zero for Prod.Count columns
final1$Prod.Count[is.na(final1$Prod.Count)]<-0
final1 <- final1 %>%
left_join(df_exp, by = "Var2")
}
#print(class(final1$Freq))
#print(class(final1$Prod.Count))
#sapply(final1, class)
#browser()
final1 <- final1 %>%
mutate(Rate = final1$Freq/final1$Prod.Count)
#order data frame by column by which you would do anomaly detection in order to get
#clustering group properly, this way higher values will belong to grp. 2 (Anomalous grp)
final1 <- final1[order(final1$Rate),]
#Hierarchical clustring ####
anom.d <- dist(final1[, "Rate"],method = "euclidean")
n <- as.integer(attr(anom.d, "Size"))
#must have n >= 2 objects to cluster otherwise get error:
#https://github.com/SurajGupta/r-source/blob/master/src/library/stats/R/hclust.R
if (n > 2) {
anom.hc <- hclust(d=anom.d, method="complete")
grp1 <- cutree(anom.hc, k=2) # cut tree into 2 clusters
m1<-as.matrix(grp1)
final1 <- data.frame(final1, m1)
nk <- ''
anomaly.scores <- ''
#nk <- nrow(final1)-1
if ( nrow(final1) > 4){
nk <- nrow(final1)-2
} else {
nk <- nrow(final1)-1
}
####LOF Scores: assign nk value for number of neighbors####
anomaly.scores <- lofactor(final1[, "Rate"], k=nk)
final1$Anomaly.score <- anomaly.scores
df_result <- final1 %>%
rename("Part.number" = Var1,
"Year.month" = Var2,
"cluster" = m1) %>%
mutate(Anomaly = ifelse(final1$m1==1,"N","Y"),
Date.type = adt[k],
Anomaly.for = af[j],
Anomaly.type = "Regular",
Freq.Detrend = 0)
datalist[[i]] <- df_result
} # end if (n > 2)
} # For uq_parts
#bind rows for each cof.level.3/Dealer
result <- dplyr::bind_rows(result,datalist)
print(nrow(result))
} # end k
#print(Sys.time()
} # end j
library(swirl)
swirl()
install_course('R_Programming')
install_course_github('DataScienceUWL','UW_Stat_Methods')
library(swirl)
swirl()
install_course_github('DataScienceUWL','UW_Stat_Methods')
install_course_github('DataScienceUWL','UW_Stat_Methods')
swirl()
swirl()
swirl()
exit
library(swirl)
swirl()
0
exit
exit()
library(swirl)
swirl()
exit
exit()
quit()
install.packages("devtools")
library(devtools)
install_github('DataScienceUWL/DS705data')
library(swirl)
swirl()
install_course_github('DataScienceUWL','UW_Stat_Methods')
swirl()
str(HealthExam)
summary(HealthExam)
hf <- HealthExam[HealthExam$Sex=="F"]
hf <- HealthExam[HealthExam$Sex=="F",]
summary(hf)
chol <- hf$Cholesterol
summary(chol)
summary(chol)
sd(chol)
var(chol)
quantile(chol)
quantile(chol,.9)
quantile(chol, c(.1,.5,.9))
sort(chol)
upper_cutoff <- quantile(chol,.75) + 1.5*IQR(chol)
upper_cutoff
sort(chol)
2
3
sum(chol>upper_cutoff)
?pnorm
pnorm(1.3)
pnorm(17,mean=20,sd=2)
library(swirl)
swirl()
pnorm(21,mean=20,sd=2,lower.tail=FALSE)
1-pnorm(21,mean=20,sd=2)
pnorm(21,mean=20,sd=2)-pnorm(17,mean=20,sd=2)
?qnorm
qnorm(.1)
qnorm(.5831,mean=20,sd=2)
qnorm(.75,mean=530,sd=205)
hf <- HealthExam[Sex=="F",]
hf <- HealthExam[HealthExam$Sex=="F",]
hf <- subset(HealthExam,HealthExam$Sex=="F")
head(hf)
fd <- hf$DiasBP
fs <- hf$SysBP
boxplot(fs)
1
(max(fs)-mean(fs))/sd(fs)
1-pnorm(3.43)
2*(1-pnorm(3.43))
hist(fs)
qqnorm(fs)
qqline(fs)
?rnorm
w <- rnorm(10,mean=7,sd=.8)
head(w)
w
?par
par(mfrow=c(1,2))
?mfrow
hist(w)
qqnorm(w)
qqline(w)
par(mfrow=c(1,1))
```{r include=FALSE, cache=FALSE}
# Don't modify this chunk of code, it is just installing and loading the DS705data package
if (!require(DS705data)){
if (!require(devtools)){
install.packages('devtools',repos="http://cran.rstudio.com")
}
library(devtools)
install_github('DataScienceUWL/DS705data')
}
require(DS705data)
# load the HealthExam data set into memory
data(HealthExam)
setwd("C:/Users/irgepi/source/repos/ds705/Lesson 1 Homework Packet/Lesson 1 Homework Packet")
# This is a comment, change it and add your code below.
fs <- hf$Cholesterol
mean(fs)
mean(fs) == 240.875
# Assign cholestrol of 40 women in data set to variable fs.
fs <- hf$Cholesterol
# Check that the mean cholestrol level is 240.875
mean(fs) == 240.875
# insert your code here.
sumary(fs)
# insert your code here.
summary(fs)
sd(fs)
View(hf)
